{"ast":null,"code":"export const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n};\nexport const readBytes = async function* (iterable, chunkSize, encode) {\n  for await (const chunk of iterable) {\n    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : await encode(String(chunk)), chunkSize);\n  }\n};\nexport const trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {\n  const iterator = readBytes(stream, chunkSize, encode);\n  let bytes = 0;\n  let done;\n\n  let _onFinish = e => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  };\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {\n          done,\n          value\n        } = await iterator.next();\n\n        if (done) {\n          _onFinish();\n\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n\n        throw err;\n      }\n    },\n\n    cancel(reason) {\n      _onFinish(reason);\n\n      return iterator.return();\n    }\n\n  }, {\n    highWaterMark: 2\n  });\n};","map":{"version":3,"sources":["C:/Users/Tanaton Phukanngam/ResponsiveWeb-TackingPatient-for-Nurse/node_modules/axios/lib/helpers/trackStream.js"],"names":["streamChunk","chunk","chunkSize","len","byteLength","pos","end","slice","readBytes","iterable","encode","ArrayBuffer","isView","String","trackStream","stream","onProgress","onFinish","iterator","bytes","done","_onFinish","e","ReadableStream","pull","controller","value","next","close","loadedBytes","enqueue","Uint8Array","err","cancel","reason","return","highWaterMark"],"mappings":"AACA,OAAO,MAAMA,WAAW,GAAG,WAAWC,KAAX,EAAkBC,SAAlB,EAA6B;AACtD,MAAIC,GAAG,GAAGF,KAAK,CAACG,UAAhB;;AAEA,MAAI,CAACF,SAAD,IAAcC,GAAG,GAAGD,SAAxB,EAAmC;AACjC,UAAMD,KAAN;AACA;AACD;;AAED,MAAII,GAAG,GAAG,CAAV;AACA,MAAIC,GAAJ;;AAEA,SAAOD,GAAG,GAAGF,GAAb,EAAkB;AAChBG,IAAAA,GAAG,GAAGD,GAAG,GAAGH,SAAZ;AACA,UAAMD,KAAK,CAACM,KAAN,CAAYF,GAAZ,EAAiBC,GAAjB,CAAN;AACAD,IAAAA,GAAG,GAAGC,GAAN;AACD;AACF,CAhBM;AAkBP,OAAO,MAAME,SAAS,GAAG,iBAAiBC,QAAjB,EAA2BP,SAA3B,EAAsCQ,MAAtC,EAA8C;AACrE,aAAW,MAAMT,KAAjB,IAA0BQ,QAA1B,EAAoC;AAClC,WAAOT,WAAW,CAACW,WAAW,CAACC,MAAZ,CAAmBX,KAAnB,IAA4BA,KAA5B,GAAqC,MAAMS,MAAM,CAACG,MAAM,CAACZ,KAAD,CAAP,CAAlD,EAAoEC,SAApE,CAAlB;AACD;AACF,CAJM;AAMP,OAAO,MAAMY,WAAW,GAAG,CAACC,MAAD,EAASb,SAAT,EAAoBc,UAApB,EAAgCC,QAAhC,EAA0CP,MAA1C,KAAqD;AAC9E,QAAMQ,QAAQ,GAAGV,SAAS,CAACO,MAAD,EAASb,SAAT,EAAoBQ,MAApB,CAA1B;AAEA,MAAIS,KAAK,GAAG,CAAZ;AACA,MAAIC,IAAJ;;AACA,MAAIC,SAAS,GAAIC,CAAD,IAAO;AACrB,QAAI,CAACF,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG,IAAP;AACAH,MAAAA,QAAQ,IAAIA,QAAQ,CAACK,CAAD,CAApB;AACD;AACF,GALD;;AAOA,SAAO,IAAIC,cAAJ,CAAmB;AACxB,UAAMC,IAAN,CAAWC,UAAX,EAAuB;AACrB,UAAI;AACF,cAAM;AAACL,UAAAA,IAAD;AAAOM,UAAAA;AAAP,YAAgB,MAAMR,QAAQ,CAACS,IAAT,EAA5B;;AAEA,YAAIP,IAAJ,EAAU;AACTC,UAAAA,SAAS;;AACRI,UAAAA,UAAU,CAACG,KAAX;AACA;AACD;;AAED,YAAIzB,GAAG,GAAGuB,KAAK,CAACtB,UAAhB;;AACA,YAAIY,UAAJ,EAAgB;AACd,cAAIa,WAAW,GAAGV,KAAK,IAAIhB,GAA3B;AACAa,UAAAA,UAAU,CAACa,WAAD,CAAV;AACD;;AACDJ,QAAAA,UAAU,CAACK,OAAX,CAAmB,IAAIC,UAAJ,CAAeL,KAAf,CAAnB;AACD,OAfD,CAeE,OAAOM,GAAP,EAAY;AACZX,QAAAA,SAAS,CAACW,GAAD,CAAT;;AACA,cAAMA,GAAN;AACD;AACF,KArBuB;;AAsBxBC,IAAAA,MAAM,CAACC,MAAD,EAAS;AACbb,MAAAA,SAAS,CAACa,MAAD,CAAT;;AACA,aAAOhB,QAAQ,CAACiB,MAAT,EAAP;AACD;;AAzBuB,GAAnB,EA0BJ;AACDC,IAAAA,aAAa,EAAE;AADd,GA1BI,CAAP;AA6BD,CAzCM","sourcesContent":["\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize, encode) {\n  for await (const chunk of iterable) {\n    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : (await encode(String(chunk))), chunkSize);\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {\n  const iterator = readBytes(stream, chunkSize, encode);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n"]},"metadata":{},"sourceType":"module"}